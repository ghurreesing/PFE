// Generated by gencpp from file line_follower_robot/LineFollowerStatus.msg
// DO NOT EDIT!


#ifndef LINE_FOLLOWER_ROBOT_MESSAGE_LINEFOLLOWERSTATUS_H
#define LINE_FOLLOWER_ROBOT_MESSAGE_LINEFOLLOWERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace line_follower_robot
{
template <class ContainerAllocator>
struct LineFollowerStatus_
{
  typedef LineFollowerStatus_<ContainerAllocator> Type;

  LineFollowerStatus_()
    : status()  {
    }
  LineFollowerStatus_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LineFollowerStatus_

typedef ::line_follower_robot::LineFollowerStatus_<std::allocator<void> > LineFollowerStatus;

typedef boost::shared_ptr< ::line_follower_robot::LineFollowerStatus > LineFollowerStatusPtr;
typedef boost::shared_ptr< ::line_follower_robot::LineFollowerStatus const> LineFollowerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator1> & lhs, const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator1> & lhs, const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace line_follower_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "672ccc7edd3a5621529e608443618e1f";
  }

  static const char* value(const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x672ccc7edd3a5621ULL;
  static const uint64_t static_value2 = 0x529e608443618e1fULL;
};

template<class ContainerAllocator>
struct DataType< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "line_follower_robot/LineFollowerStatus";
  }

  static const char* value(const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] status\n"
;
  }

  static const char* value(const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineFollowerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::line_follower_robot::LineFollowerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::line_follower_robot::LineFollowerStatus_<ContainerAllocator>& v)
  {
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINE_FOLLOWER_ROBOT_MESSAGE_LINEFOLLOWERSTATUS_H
